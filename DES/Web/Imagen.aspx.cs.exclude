using System;
using System.Linq;
using System.ServiceModel;
using ServiceDocumental;
using SIGAPred.Common.WCF;
using SIGAPred.Common.Web;
using SIGAPred.Documental.Services.AccesoDatos.Gestion.DocumentosDigitales;

/// <summary>
/// Clase para la gestión de imagenes.
/// </summary>
public partial class Imagen : PageBase
{
    #region PAGE

    /// <summary>
    /// Carga de la página.
    /// </summary>
    /// <param name="sender">Origen del evento.</param>
    /// <param name="e">Información del evento.</param>
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            dseDocumentosDigitales.DOC_FICHERODOCUMENTODataTable tableFoto = null;
            decimal[] imagenes = new decimal[1];
            imagenes[0] = Convert.ToDecimal(WebUtils.QueryString(Constantes.PAR_IDDOCUMENTOFOTO));
            string tipoFoto = WebUtils.QueryString(Constantes.PAR_TIPO_FOTO);

            WebUtils.QueryString(Constantes.PAR_TAMANIOFOTO);

            DocumentosDigitalesClient clienteDOC = new DocumentosDigitalesClient();

            try
            {
                switch (WebUtils.QueryString(Constantes.PAR_TAMANIOFOTO))
                {
                    case Constantes.PAR_VAL_TAMANIOFOTO_NORMAL:
                        if (tipoFoto.Equals(Constantes.PAR_FOTO_DOCDIG))
                        {
                            tableFoto = clienteDOC.GetImagenes(imagenes);
                        }
                        else if (tipoFoto.Equals(Constantes.PAR_FOTO_FICHERO))
                        {
                            tableFoto = clienteDOC.GetFicheroDocumentoById(imagenes[0]);
                        }
                        break;
                    case Constantes.PAR_VAL_TAMANIOFOTO_REDUCIDA:

                        if (tipoFoto.Equals(Constantes.PAR_FOTO_DOCDIG))
                        {
                            tableFoto = clienteDOC.GetImagenesReducidas(imagenes, 160);
                        }
                        else if (tipoFoto.Equals(Constantes.PAR_FOTO_FICHERO))
                        {
                            tableFoto = clienteDOC.GetFicheroDocumentoById(imagenes[0]);
                        }
                        break;
                }
            }
            finally
            {
                clienteDOC.Disconnect();
            }

            //Devolvemos la imagen.
            Response.BinaryWrite(tableFoto.First().BINARIODATOS);
        }
        catch (FaultException<ServiceAvaluos.AvaluosException> cex)
        {
            string msj = Constantes.MSJ_ERROR_OPERACION + Environment.NewLine + Environment.NewLine + cex.Detail.Descripcion;
            MostrarMensajeInfoExcepcion(msj);
        }
        catch (FaultException<ServiceAvaluos.AvaluosInfoException> ciex)
        {
            string msj = Constantes.MSJ_ERROR_OPERACION + Environment.NewLine + Environment.NewLine + ciex.Detail.Descripcion;
            MostrarMensajeInfoExcepcion(msj);
        }
        catch (Exception ex)
        {
            ExceptionPolicyWrapper.HandleException(ex);
            string msj = Constantes.MSJ_ERROR_OPERACION + Environment.NewLine + Environment.NewLine + ex.Message;
            MostrarMensajeInfoExcepcion(msj);
        }
    }

    /// <summary>
    /// Pre-renderizado de la página.
    /// </summary>
    /// <param name="sender">Origen del evento.</param>
    /// <param name="e">Información del evento.</param>
    protected void Page_Prerender(object sender, EventArgs e)
    {
        try
        {
            //Se establece el botón de cancelar para los modalpopupextenders
            mpeErrorTareas.CancelControlID = errorTareas.ClientIdCancelacion;
        }
        catch (Exception ex)
        {
            ExceptionPolicyWrapper.HandleException(ex);
            string msj = Constantes.MSJ_ERROR_OPERACION + Environment.NewLine + Environment.NewLine + ex.Message;
            MostrarMensajeInfoExcepcion(msj);
        }
    }

    #endregion 

    #region MOSTRAR MENSAJES

    /// <summary>
    /// Mostrar mensaje de error asociado a una excepción.
    /// </summary>
    /// <param name="mensaje">El mensaje que se quiere mostrar.</param>
    private void MostrarMensajeInfoExcepcion(string mensaje)
    {
        errorTareas.TextoBasicoMostrar = Constantes.MSJ_ERROR_APLICACION;
        errorTareas.TextoAvanzadoMostrar = mensaje;
        mpeErrorTareas.Show();
        uppErrorTareas.Update();
    }

    #endregion 
}
